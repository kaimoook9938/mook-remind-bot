from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
import datetime, pytz

scheduler = AsyncIOScheduler()
reminder_jobs = {}  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö job ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ

async def remind_once(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:]) or "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤~"

        hour, minute = map(int, time_str.split(":"))
        now = datetime.datetime.now(pytz.timezone("Asia/Bangkok"))
        remind_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if remind_time < now:
            remind_time += datetime.timedelta(days=1)

        user_id = update.effective_chat.id
        job_id = f"once-{user_id}-{time_str}-{message}"

        scheduler.add_job(
            send_reminder,
            trigger=DateTrigger(run_date=remind_time),
            args=[context.application, user_id, message],
            id=job_id
        )

        reminder_jobs[job_id] = f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: {time_str} ‚Üí {message}"
        await update.message.reply_text(f"üìå ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: {time_str} ‚Üí {message}")
    except Exception as e:
        await update.message.reply_text(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

async def remind_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        interval = context.args[0]  # ‡πÄ‡∏ä‡πà‡∏ô 2h ‡∏´‡∏£‡∏∑‡∏≠ 30m
        message = " ".join(context.args[1:]) or "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤~"

        if "h" in interval:
            hours = int(interval.replace("h", ""))
            trigger = IntervalTrigger(hours=hours)
        elif "m" in interval:
            minutes = int(interval.replace("m", ""))
            trigger = IntervalTrigger(minutes=minutes)
        else:
            raise ValueError("‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 2h ‡∏´‡∏£‡∏∑‡∏≠ 30m")

        user_id = update.effective_chat.id
        job_id = f"interval-{user_id}-{interval}-{message}"

        scheduler.add_job(
            send_reminder,
            trigger=trigger,
            args=[context.application, user_id, message],
            id=job_id,
            replace_existing=True
        )

        reminder_jobs[job_id] = f"‡∏ó‡∏∏‡∏Å {interval}: {message}"
        await update.message.reply_text(f"üîÅ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å {interval}: {message}")
    except Exception as e:
        await update.message.reply_text(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

async def remind_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = context.args[0]
        message = " ".join(context.args[1:])
        user_id = update.effective_chat.id

        job_id_prefix = f"{user_id}-{time_str}-{message}"
        matched_job_id = next((jid for jid in reminder_jobs if job_id_prefix in jid), None)

        if matched_job_id:
            scheduler.remove_job(matched_job_id)
            del reminder_jobs[matched_job_id]
            await update.message.reply_text(f"‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {time_str} ‚Üí {message}")
        else:
            await update.message.reply_text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏∞~")
    except Exception as e:
        await update.message.reply_text(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

async def remind_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if reminder_jobs:
        text = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:\n" + "\n".join(f"- {v}" for v in reminder_jobs.values())
    else:
        text = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡πâ‡∏≤~ üí§"
    await update.message.reply_text(text)

async def send_reminder(app, user_id, message):
    await app.bot.send_message(chat_id=user_id, text=f"‚è∞ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! {message}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("MookBot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤‡∏≤‡∏≤ ‚è∞‚ú®")

async def main():
    app = ApplicationBuilder().token("7691645006:AAHC4hDGC8vQEWmqldhT1ntKsjn70PjqrBc").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("remind_once", remind_once))
    app.add_handler(CommandHandler("remind_interval", remind_interval))
    app.add_handler(CommandHandler("remind_cancel", remind_cancel))
    app.add_handler(CommandHandler("remind_list", remind_list))

    scheduler.start()

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())